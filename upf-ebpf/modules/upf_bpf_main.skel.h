/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED! */
#ifndef __UPF_BPF_MAIN_BPF_SKEL_H__
#define __UPF_BPF_MAIN_BPF_SKEL_H__

#include <stdlib.h>
#include <bpf/libbpf.h>

struct upf_bpf_main_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_program *xdp_upf;
	} progs;
	struct {
		struct bpf_link *xdp_upf;
	} links;
};

static void
upf_bpf_main_bpf__destroy(struct upf_bpf_main_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
upf_bpf_main_bpf__create_skeleton(struct upf_bpf_main_bpf *obj);

static inline struct upf_bpf_main_bpf *
upf_bpf_main_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct upf_bpf_main_bpf *obj;

	obj = (struct upf_bpf_main_bpf *)calloc(1, sizeof(*obj));
	if (!obj)
		return NULL;
	if (upf_bpf_main_bpf__create_skeleton(obj))
		goto err;
	if (bpf_object__open_skeleton(obj->skeleton, opts))
		goto err;

	return obj;
err:
	upf_bpf_main_bpf__destroy(obj);
	return NULL;
}

static inline struct upf_bpf_main_bpf *
upf_bpf_main_bpf__open(void)
{
	return upf_bpf_main_bpf__open_opts(NULL);
}

static inline int
upf_bpf_main_bpf__load(struct upf_bpf_main_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct upf_bpf_main_bpf *
upf_bpf_main_bpf__open_and_load(void)
{
	struct upf_bpf_main_bpf *obj;

	obj = upf_bpf_main_bpf__open();
	if (!obj)
		return NULL;
	if (upf_bpf_main_bpf__load(obj)) {
		upf_bpf_main_bpf__destroy(obj);
		return NULL;
	}
	return obj;
}

static inline int
upf_bpf_main_bpf__attach(struct upf_bpf_main_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
upf_bpf_main_bpf__detach(struct upf_bpf_main_bpf *obj)
{
	return bpf_object__detach_skeleton(obj->skeleton);
}

static inline int
upf_bpf_main_bpf__create_skeleton(struct upf_bpf_main_bpf *obj)
{
	struct bpf_object_skeleton *s;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)
		return -1;
	obj->skeleton = s;

	s->sz = sizeof(*s);
	s->name = "upf_bpf_main_bpf";
	s->obj = &obj->obj;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs)
		goto err;

	s->progs[0].name = "xdp_upf";
	s->progs[0].prog = &obj->progs.xdp_upf;
	s->progs[0].link = &obj->links.xdp_upf;

	s->data_sz = 1648;
	s->data = (void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xb0\x03\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0b\0\
\x01\0\xb7\0\0\0\x02\0\0\0\x95\0\0\0\0\0\0\0\x44\x75\x61\x6c\x20\x42\x53\x44\
\x2f\x47\x50\x4c\0\0\0\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\x0c\x01\0\0\x0c\x01\0\
\0\xe6\0\0\0\0\0\0\0\0\0\0\x02\x02\0\0\0\x01\0\0\0\x06\0\0\x04\x18\0\0\0\x08\0\
\0\0\x03\0\0\0\0\0\0\0\x0d\0\0\0\x03\0\0\0\x20\0\0\0\x16\0\0\0\x03\0\0\0\x40\0\
\0\0\x20\0\0\0\x03\0\0\0\x60\0\0\0\x30\0\0\0\x03\0\0\0\x80\0\0\0\x3f\0\0\0\x03\
\0\0\0\xa0\0\0\0\x4e\0\0\0\0\0\0\x08\x04\0\0\0\x54\0\0\0\0\0\0\x01\x04\0\0\0\
\x20\0\0\0\0\0\0\0\x01\0\0\x0d\x06\0\0\0\x61\0\0\0\x01\0\0\0\x65\0\0\0\0\0\0\
\x01\x04\0\0\0\x20\0\0\x01\x69\0\0\0\x01\0\0\x0c\x05\0\0\0\xbd\0\0\0\0\0\0\x01\
\x01\0\0\0\x08\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x08\0\0\0\x0a\0\0\0\x0d\0\0\0\
\xc2\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\xd6\0\0\0\0\0\0\x0e\x09\0\0\0\x01\0\0\
\0\xde\0\0\0\x01\0\0\x0f\0\0\0\0\x0b\0\0\0\0\0\0\0\x0d\0\0\0\0\x78\x64\x70\x5f\
\x6d\x64\0\x64\x61\x74\x61\0\x64\x61\x74\x61\x5f\x65\x6e\x64\0\x64\x61\x74\x61\
\x5f\x6d\x65\x74\x61\0\x69\x6e\x67\x72\x65\x73\x73\x5f\x69\x66\x69\x6e\x64\x65\
\x78\0\x72\x78\x5f\x71\x75\x65\x75\x65\x5f\x69\x6e\x64\x65\x78\0\x65\x67\x72\
\x65\x73\x73\x5f\x69\x66\x69\x6e\x64\x65\x78\0\x5f\x5f\x75\x33\x32\0\x75\x6e\
\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x78\x64\x70\0\x69\x6e\x74\0\x78\x64\
\x70\x5f\x75\x70\x66\0\x2f\x68\x6f\x6d\x65\x2f\x73\x6d\x69\x61\x6e\x6f\x2f\x64\
\x65\x76\x2f\x62\x65\x73\x73\x2f\x75\x70\x66\x2d\x65\x62\x70\x66\x2f\x6d\x6f\
\x64\x75\x6c\x65\x73\x2f\x75\x70\x66\x5f\x62\x70\x66\x5f\x6d\x61\x69\x6e\x2e\
\x62\x70\x66\x2e\x63\0\x09\x72\x65\x74\x75\x72\x6e\x20\x58\x44\x50\x5f\x50\x41\
\x53\x53\x3b\0\x63\x68\x61\x72\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\
\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x4c\x49\x43\x45\x4e\x53\x45\0\x6c\x69\x63\
\x65\x6e\x73\x65\0\0\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\0\0\x14\0\0\0\x1c\
\0\0\0\x30\0\0\0\0\0\0\0\x08\0\0\0\x61\0\0\0\x01\0\0\0\0\0\0\0\x07\0\0\0\x10\0\
\0\0\x61\0\0\0\x01\0\0\0\0\0\0\0\x71\0\0\0\xab\0\0\0\x02\x6c\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x26\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x4f\0\
\0\0\x11\0\x04\0\0\0\0\0\0\0\0\0\x0d\0\0\0\0\0\0\0\x1c\x01\0\0\0\0\0\0\x04\0\0\
\0\x03\0\0\0\x2c\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x40\0\0\0\0\0\0\0\x04\0\0\0\
\x01\0\0\0\x0a\x0b\0\x2e\x74\x65\x78\x74\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\x2e\
\x65\x78\x74\0\x78\x64\x70\0\x2e\x6c\x6c\x76\x6d\x5f\x61\x64\x64\x72\x73\x69\
\x67\0\x78\x64\x70\x5f\x75\x70\x66\0\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x73\x74\
\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x2e\x72\x65\x6c\x2e\x42\x54\
\x46\0\x4c\x49\x43\x45\x4e\x53\x45\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x36\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x52\
\x03\0\0\0\0\0\0\x57\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x01\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x14\0\0\0\
\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x2e\0\0\0\x01\0\0\0\x03\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x50\0\0\0\0\0\0\0\x0d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x4a\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x60\0\0\0\0\0\0\0\x0a\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x46\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x20\
\x03\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x0a\0\0\0\x05\0\0\0\x08\0\0\0\0\0\0\0\x10\0\
\0\0\0\0\0\0\x0b\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x6c\x02\0\0\0\
\0\0\0\x50\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\
\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x30\x03\0\0\0\0\0\0\x20\0\0\
\0\0\0\0\0\x0a\0\0\0\x07\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x18\0\0\0\
\x03\x4c\xff\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\x50\x03\0\0\0\0\0\0\x02\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x3e\0\0\0\x02\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc0\x02\0\0\0\0\0\0\x60\0\0\0\0\0\0\0\x01\0\
\0\0\x02\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0";

	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return -1;
}

#endif /* __UPF_BPF_MAIN_BPF_SKEL_H__ */
